# SPDX-License-Identifier: GPL-2.0-only

PHONY := __default
__default: vmlinex

include include/config/auto.conf
include $(srctree)/scripts/Kbuild.include

# for c_flags
include $(srctree)/scripts/Makefile.lib

targets :=

quiet_cmd_cc_o_c = CC      $@
      cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $<

%.o: %.c FORCE
	$(call if_changed_dep,cc_o_c)

ifdef CONFIG_MODULES
KASAN_SANITIZE_.vmlinex.export.o := n
GCOV_PROFILE_.vmlinex.export.o := n
targets += .vmlinex.export.o
vmlinex: .vmlinex.export.o
endif

ARCH_POSTLINK := $(wildcard $(srctree)/arch/$(SRCARCH)/Makefile.postlink)

# Final link of vmlinex with optional arch pass after final link
cmd_link_vmlinex =							\
	$< "$(LD)" "$(KBUILD_LDFLAGS)" "$(LDFLAGS_vmlinex)";		\
	$(if $(ARCH_POSTLINK), $(MAKE) -f $(ARCH_POSTLINK) $@, true)

targets += vmlinex
vmlinex: scripts/link-vmlinex.sh vmlinex.o $(KBUILD_LDS) FORCE
	+$(call if_changed_dep,link_vmlinex)

# Add FORCE to the prequisites of a target to force it to be always rebuilt.
# ---------------------------------------------------------------------------

PHONY += FORCE
FORCE:

# Read all saved command lines and dependencies for the $(targets) we
# may be building above, using $(if_changed{,_dep}). As an
# optimization, we don't need to read them if the target does not
# exist, we will rebuild anyway in that case.

existing-targets := $(wildcard $(sort $(targets)))

-include $(foreach f,$(existing-targets),$(dir $(f)).$(notdir $(f)).cmd)

.PHONY: $(PHONY)
